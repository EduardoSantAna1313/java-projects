package dependency.injection.service.command;

import java.util.concurrent.atomic.AtomicReference;

import org.eclipse.osgi.framework.console.CommandInterpreter;
import org.eclipse.osgi.framework.console.CommandProvider;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import dependency.injection.service.DictionaryService;

@Component
public class ServiceComponent implements CommandProvider {

    final AtomicReference<DictionaryService> dictionaryRef = new AtomicReference<>();

    public ServiceComponent() {
        System.out.println("ServiceComponent construtor!!");
    }

    public void _dict(CommandInterpreter ci) {

        System.out.println("teste............");

        String arg = ci.nextArgument();
        String word = ci.nextArgument();
        if (arg == null) {
            return;
        }
        if (arg.equalsIgnoreCase("check")) {
            if (word != null && dictionaryRef.get().check(word)) {
                ci.println(word + ": exists in the dictionary");
            } else {
                ci.println(word + ": doesn't exist in the dictionary");
            }
        }
        if (arg.equalsIgnoreCase("languages")) {
            String[] langs = dictionaryRef.get().getLanguages();
            for (int i = 0; i < langs.length; i++) {
                ci.println("Languages available:");
                ci.println("\t " + langs[i]);
            }
        }
    }

    public String getHelp() {
        StringBuilder buffer = new StringBuilder();
        buffer.append("---Generated by PDE---\n");
        buffer.append("\tdict check <word> - check for the existence of a word\n");
        buffer.append("\tdict languages - list the languages available\n");
        return buffer.toString();
    }

    @Reference
    public void setDictionary(DictionaryService d) {
        System.out.println("Set dict.... " + d);
        dictionaryRef.set(d);
    }

    public void unsetDictionary(DictionaryService d) {
        dictionaryRef.compareAndSet(d, null);
    }

}